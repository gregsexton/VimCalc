*VimCalc* A plugin to run an interactive calculator inside a Vim buffer.

Author:  Greg Sexton <gregsexton@gmail.com>                    *vimcalc-author*
License: Same terms as Vim itself (see |license|).
URL:     https://github.com/gregsexton/VimCalc


VimCalc                                                         *vimcalc* *:Calc*

1. Introduction              |vimcalc-introduction|
2. Installation              |vimcalc-installation|
3. Usage                     |vimcalc-usage|
4. Operators                 |vimcalc-operators|
5. Functions                 |vimcalc-functions|
6. Variables and Literals    |vimcalc-vars-literals|
7. Configuration Options     |vimcalc-config-options|
8. Changelog                 |vimcalc-changelog|
9. Misc                      |vimcalc-misc|

==============================================================================
1. Introduction                                          *vimcalc-introduction*

VimCalc provides a convenient way to access a powerful interactive calculator
whilst inside a Vim session. Quickly rattle off a few sums to test an idea.
Perform complex calculations using built-in functions to validate answers.
Quickly and simply convert from octal to hex to decimal and back again. Setup
a bunch of variables to be used in a complex expression. Change variables
easily and then simply re-evaluate the expression. Whatever you may need a
calculator for, VimCalc is up to the task.

Not only can VimCalc calculate but it uses Vim for input and editing. Quickly
and easily perform edits on previous calculations using the power of Vim and
then re-evaluate them by simply hitting <CR>. Once you've got the answers yank
them into several registers and paste with ease into other buffers!

==============================================================================
2. Installation                                          *vimcalc-installation*

2.1 Requirements                                         *vimcalc-requirements*

  * Vim 7.0+ with +python.
  * Python installed.

If you're compiling Vim from source, be sure to use the --enable-pythoninterp
option. Otherwise check your OS's package distro for a version of Vim with
Python support. On OS X the best option is MacVim. VimCalc should work on
Windows too, you will need to install the correct python dll for the version
of Vim you are using. Please see the web for help with this.

2.2 Installation                                              *vimcalc-install*

Download the latest source from https://github.com/gregsexton/VimCalc.

Extract (or copy) all of the files into your Vim runtime directory, ensuring
that they are placed into the correct subdirectories. Then update your help
tags file to enable VimCalc help. See |add-local-help| for details.

==============================================================================
3. Usage                                                        *vimcalc-usage*

Type :Calc to open a new window containing the VimCalc buffer. This is the
only command that VimCalc defines. The VimCalc buffer has been tailored to act
as a Read Eval Print Loop (REPL). That is, any command read at the prompt will
be evaluated and the result printed back to you interactively.

:Calc will place the cursor, in insert mode, at a prompt ready to issue
commands to the REPL.  This window should be closed as with any other window
by issuing a :q. Running :Calc in a tab with a VimCalc window already open
will cause the cursor to jump to that window.

A typical interaction:
>
    > 5+4
    ans = 9.0
<
The '> ' is the prompt. This is very important to VimCalc. Lines in the buffer
with this prefixing them are evaluable by pressing <CR> on them whilst in
insert or normal mode. Any lines that are not prefixed by the prompt are
ignored. That is, if you are pressing return and VimCalc is not doing anything
it is probably because it is not recognising a correct prompt. This prevents
you from accidentally trying to evaluate results of previous expressions. The
prompt is configurable, see |vimcalc-prompt|.

'5+4' is the expression that is evaluated. VimCalc supports many operators and
functions that are explained later in this documentation. (See |vimcalc-operators|).

All results are prefixed with something of the form: 'ans = '. This tells you
which variable contains the result of the evaluation (if it were successfully
evaluated). In this case the 'ans' variable contains the result '9.0'. All
evaluations are assigned to a variable. If the user does not explicitly state
the variable to be assigned with a let statement then the default variable
'ans' is used.  Variables can be evaluated by using them in expressions. See
|vimcalc-defining-variables| for more about variables.

Here are some further examples to whet your appetite.
>
    > let x = 4
    x = 4.0
    > 9 * sqrt(4)
    ans = 18.0
    > 9**2 - (sqrt(4)+2)
    ans = 77.0
    > 0xff + 2
    ans = 257.0
<
3.1 REPL Key Bindings                                    *vimcalc-key-bindings*

The VimCalc buffer rebinds as few keys as necessary to preserve as much Vim
functionality as possible. Searching, yanking, highlighting text etc. should
work just fine. The idea is that you can use the buffer just like any other.
In particular the ability to edit previous expressions should be possible.
This is to allow for correcting for mistakes or adjustments to complicated
equations. Be careful with editing though as re-evaluating the expression does
not replace the previous answer and may look confusing when you come back to
it. It is probably safer to use the history navigation.

    Command     Mode            Description ~

    |<CR>|        Normal          This will evaluate the expression on the line
                                that the cursor currently is on. The result is
                                displayed at the bottom of the buffer and the
                                prompt is jumped to.

    |<CR>|        Insert          This does the same thing as in normal mode but
                                leaves you in insert mode at the prompt.

    |o|           Normal          This will jump to the prompt and place you in
                                insert mode from anywhere in the buffer.

    |O|           Normal          The same as normal mode o.

    |<up>|        Insert          This recalls the previous expression that was
                                evaluated. This allows you to browse through
                                the history of the REPL. See |vimcalc-history-size|
                                to configure how many items of history are kept.

    |<down>|      Insert          This recalls the next expression that was
                                evaluated. Opposite in effect to <up>.

    |<F1>|        Normal          This opens this help page at the
                                function-list. Useful for quickly looking up a
                                forgotten function.


3.2 Directives                                             *vimcalc-directives*

Directives are a method of issuing commands to the actual REPL environment.
All directives start with a ':'. Directives have a global effect on how the
REPL works and take effect immediately. The currently recognised directives
are:

    Directive   Effect~

    |:dec|        Puts the REPL into decimal mode. All results are evaluated and
                then converted into decimal before being displayed. This is
                the default.

    |:hex|        Puts the REPL into hexadecimal mode. All results are evaluated
                and then converted into hexadecimal before being displayed.

    |:oct|        Puts the REPL into octal mode. All results are evaluated and
                then converted into octal before being displayed.

    |:int|        Puts the environment into integer mode. All results are
                evaluated using integer precision arithmetic.

    |:float|      Puts the environment into floating point mode. All results
                are evaluated using floating point precision arithmetic. This
                is the default.

    |:s[tatus]|   This has no effect on the environment. It displays a status
                message informing as to the state of the environment.

    |:vars|       This has no effect on the environment. It displays a list of
                all of the currently bound variables and their assigned value.

    |:q|          This allows you to quit and close the VimCalc window exactly
                like performing ':q' in normal mode. This is convenient if you
                have the |vimcalc-insert-on-enter| option enabled.

The :dec, :hex and :oct directives are particularly useful for converting
between the different number bases. Numbers are still evaluated by the REPL
based on how they are entered, i.e the number '10' is always the decimal
number 10 no matter what mode the REPL is in. If you meant hexadecimal '10'
then you must specify '0x10'. See |vimcalc-literals| for how to specify the
different number literals. This allows for easy conversion:
>
    > :hex
    CHANGED OUTPUT BASE TO HEXADECIMAL.
    > 10
    ans = 0xa
    > 0x10
    ans = 0x10
    > :dec
    CHANGED OUTPUT BASE TO DECIMAL.
    > 0x10
    ans = 16
<
The :int and :float directives only have an effect whilst the REPL is in
decimal mode. When in octal or hexadecimal modes all number literals are
calculated using integer precision regardless. It is not possible to enter
fractional octal or hexadecimal literals. Decimal floating point precision is
the default mode the REPL starts in.

When in integer mode all expressions are evaluated using integers, this
includes sub-expressions. Results are not evaluated and then lastly converted
to an integer. For example:
>
    > :float
    CHANGED OUTPUT PRECISION TO FLOATING POINT.
    > (8/3) * (4/3)
    ans = 3.55555555556
    > :int
    CHANGED OUTPUT PRECISION TO INTEGER.
    > (8/3) * (4/3)
    ans = 2
<
The integer mode answer to this expression was 2 rather than 3 as the
sub-expressions (8/3) and (4/3) were calculated also in integer mode.

The :status directive gives a brief summary of the current state of the REPL
environment. It can be shortened to ":s". This is an example output.
>
    > :status
    STATUS: OUTPUT BASE: DECIMAL; PRECISION: FLOATING POINT.
<

The :vars directive lists all of the currently bound variables and their
assigned values. Here is a sample usage.
>
    > let x = 3.0
    x = 3.0
    > :vars
    VARIABLES:
    ----------
     ans : 4.0
     e   : 2.71828182846
     phi : 1.61803398875
     pi  : 3.14159265359
     x   : 3.0
<

==============================================================================
4. Operators                                                *vimcalc-operators*

There are several operators you can use in VimCalc. They are listed here by
precedence i.e. the operators closest to the top of this table are evaluated
first. Also detailed is the associativity of the operator, whether it is
left-to-right or right-to-left. This determines the order of evaluation of
multiple uses of this operator. For example:
>
    > 2**2**3
    ans = 256.0
    > 2**(2**3)
    ans = 256.0
    > (2**2)**3
    ans = 64.0
<
The '**' operator uses right-to-left associativity. Oppositely, the '/'
operator uses left-to-right associativity:
>
    > 2/2/3
    ans = 0.333333333333
    > (2/2)/3
    ans = 0.333333333333
    > 2/(2/3)
    ans = 3.0
<
VimCalc supports wrapping expressions in parenthesis to evaluate them out of
turn. This is done with left-to-right associativity.

    Precedence  Operator    Description                         Associativity~

    0           ()          Function application.               Left-to-right

    1           -           Unary minus sign.                   Left-to-right

    2           **          Exponentiation.                     Right-to-left

    3           * /         Multiplication and division.        Left-to-right
    3           %           Modulus                             Left-to-right
    3           << >>       Arithmetic left and right shift.    Left-to-right
    3           !           Factorial (bang).                   Left-to-right
    3           & | ^       Bitwise (and, or, xor)              Left-to-right

    4           + -         Addition and subtraction.           Left-to-right

    5           =           Assignment                          Right-to-left
    5           += -=       Assignment by sum and difference.   Right-to-left
    5           *= /=       Assignment by product and division. Right-to-left
    5           %=          Assignment by remainder (modulus).  Right-to-left
    5           **=         Assignment by exponent.             Right-to-left
    5           &= |= ^=    Assignment by bitwise operation.    Right-to-left

==============================================================================
5. Functions                                                *vimcalc-functions*

VimCalc is supplied with many built-in functions. These are detailed here
including their expected outputs.

It is not possible, and never will be, to define your own functions in
VimCalc. This is a design decision of the plugin. VimCalc is an expression
evaluator and NOT a programming language. This is for two reasons. Firstly,
VimCalc intends to remain simple and straightforward to use -- so that you
will use it! Secondly, in order to add functions it would be necessary to add
conditionals (if-then-else etc.) and loops (via recursion or iteration). I do
not wish to add loops at any cost. It should be very difficult to crash a text
editor whether purposely or not and adding loops negates this.

If you find that VimCalc is missing functions that you would like to use
please submit requests to me (see |vimcalc-feedback|). Alternatively it is
straightforward to add functions to the plugin. It is a matter of defining the
function (in Python) and then adding it to the function symbol table. It
should be fairly obvious how this works upon examining the source. If you do
add functions that you think others would benefit from please, please send me
patches.

                                                        *vimcalc-function-list*
    Function        Description~
    abs(x)          Returns the absolute (unsigned) value of x.

    acos(x)         Returns the arc cosine of x (in radians).

    asin(x)         Returns the arc sine (measured in radians) of x.

    atan(x)         Returns the arc tangent (measured in radians) of x.

    atan2(y,x)      Returns the arc tangent (measured in radians) of y/x.
                    Unlike atan(y/x), the signs of both x and y are considered.

    ceil(x)         Returns the smallest integral value >= x.

    choose(n,k)     Returns the binomail coefficient n `choose` k.

    cos(x)          Returns the cosine of x (measured in radians).

    cosh(x)         Returns the hyperbolic cosine of x.

    deg(x)          Returns the degrees of angle x converted from radians.

    exp(x)          Returns e raised to the power of x.

    floor(x)        Returns the largest integral value <= x.

    hypot(x,y)      Returns the Euclidean distance of x and y
                    i.e sqrt(x*x + y*y)

    inv(x)          Returns the inverse of x, i.e. (1/x).

    ldexp(x,i)      Returns x * (2**i)

    lg(x)           Returns the logarithm of x, base 2.

    ln(x)           Returns the logarithm of x, base e.

    log(x,b)        Returns the logarithm of x, base b. If b is not specified
                    it defaults to base e.

    log10(x)        Returns the logarithm of x, base 10.

    max(x,y)        Returns the larger value of x and y.

    min(x,y)        Returns the smaller value of x and y.

    nrt(x,n)        Returns the nth root of x.

    perms(n,k)      Returns the number of k-permutations of an n-set.

    pow(x,y)        Returns x raised to the power of y (x**y).

    rad(x)          Returns the radians of angle x converted from degrees.

    rand()          Returns a random decimal number in the interval [0,1).

    round(x)        Returns the nearest integral to x.

    sin(x)          Returns the sine of x (measured in radians).

    sinh(x)         Returns the hyperbolic sine of x (measured in radians).

    sqrt(x)         Returns the square root of x.

    tan(x)          Returns the tangent of x.

    tanh(x)         Returns the hyperbolic tangent of x.

==============================================================================
6. Variables and Literals                               *vimcalc-vars-literals*

It is possible in VimCalc to define variables for use in evaluating
expressions. This can be very convenient when the expression is complicated. A
straightforward example is the quadratic formula.
>
    > let a = 2
    a = 2.0
    > let b = -1
    b = -1.0
    > let c = -6
    c = -6.0
    > ((b*-1) + sqrt(b**2 - 4*a*c))/(2*a)
    ans = 2.0
    > ((b*-1) - sqrt(b**2 - 4*a*c))/(2*a)
    ans = -1.5
<
As you can see from this example it is simple to define variables and simpler
still to use them within expressions. It would now be possible to quickly
redefine these variables and re-evaluate the two expressions to find the roots
of another quadratic equation.

Hint: To change the '+' for a '-' in the second equation it
was possible to press the <up> key to go back to the expression. Leave insert
mode and run a search and replace to change it. Hitting <CR> evaluated the new
expression.

6.1 Defining Variables                             *vimcalc-defining-variables*

To define a variable the syntax is of the form
>
    let identifier = expression
<
An identifier can begin with any of 'A-Z', 'a-z' or '_', it is then made up of
any 'A-Z', 'a-z', '0-9' or '_'. Finally it may end in a single "'". Any legal
expression can be used and the result of which will be bound to the
identifier.

Note: The 'let' in all assignments is optional and can be omitted for brevity.

It is not necessary to declare a variable before assigning it and the type is
always internally defined as a float. Arbitrary precision evaluation is a high
priority upcoming feature of VimCalc. Redefining a variable is possible and is
done by specifying it again in a new assignment.

Note: To get a listing of all currently assigned variables the :vars directive
can be used, see |vimcalc-directives|.

6.2 Variable Scope                                     *vimcalc-variable-scope*

VimCalc uses a single global scope for all variables. That is, all variables
defined are usable at any point for any evaluation. A variable is bound to a
value until it is redefined.

Variables and functions do not share the same namespace. It is perfectly legal
to define a variable with the same name as an existing function. This should
cause no ambiguity with the grammar of VimCalc.

6.3 Assignment operators.                              *vimcalc-assignment-ops*

Apart from the straightforward assignment operator '=', that assigns the result
of an expression to a variable, there are 6 others. These manipulate the
current value of the variable and result in an error if the variable is not
already defined.

    Operator        Equivalent to~

    let x +=  y     let x = x +  y
    let x -=  y     let x = x -  y
    let x *=  y     let x = x *  y
    let x /=  y     let x = x /  y
    let x %=  y     let x = x %  y
    let x **= y     let x = x ** y
    let x &=  7     let x = x &  y
    let x |=  7     let x = x |  y
    let x ^=  7     let x = x ^  y

6.4 Built-in Variables                              *vimcalc-builtin-variables*

There are four built-in variables in VimCalc, one of which you will have
already seen, 'ans'.

These are:

    e   - Euler's constant.
    pi  - Ratio of any circle's circumference to its diameter in Euclidean space.
    phi - Golden ratio. Useful when working with Fibonacci sequences.
    ans - The last anonymous answer.

The value of 'ans' changes as you evaluate expressions. 'ans' will always
contain the result of the last expression you evaluated that you did not
explicitly assign to a variable. Of course you can assign to 'ans' although
this is rather pointless.

Note also that it is possible to reassign 'e', 'pi' and 'phi'. You may do
this if you wish but it is recommended that you do not.

6.5 Literals                                                 *vimcalc-literals*

The only literals within the VimCalc 'language' are number literals.

There are three number bases in VimCalc: decimal, hexadecimal and octal. It is
possible to have VimCalc evaluate expressions and emit the answer using any of
these bases, see |vimcalc-directives|. To specify any of these bases as
literals use the following forms.

    Base        Example     Description~
    Decimal     14.2        A 'regular' number. May specify a fractional part.

    Hexadecimal 0x1f        A number prefixed with '0x'. The extra digits are
                            made up of the letters A-F. Note this is case-
                            insensitive. May only be an integer.

    Octal       042         A number prefixed with a '0'. May only use the
                            digits 0-7. May only be an integer.

==============================================================================
7. Configuration Options                               *vimcalc-config-options*

You can set the following options in your .vimrc to override the values used
by VimCalc. The defaults are shown.

7.1 Buffer Title                                         *vimcalc-buffer-title*

The title used to name the VimCalc buffer. This shouldn't clash with another
buffer name and is used to identify if a buffer is already open.
>
    let g:VCalc_Title = "__VCALC__"
<
7.2 Prompt                                                     *vimcalc-prompt*

The prompt used by VimCalc. This is used to identify evaluable lines.
>
    let g:VCalc_Prompt = "> "
<

7.3 Window Size                                              *vimcalc-win-size*

The size of the window in lines (or columns if postion is vertical).
>
    let g:VCalc_Win_Size = 10
<

7.4 Number of History Items                              *vimcalc-history-size*

The number of previous expressions that VimCalc remembers. These can be cycled
using the up and down arrow keys. Reduce this value to reduce memory usage.
>
    let g:VCalc_Max_History = 100
<
7.5 Insert Mode when Entering Buffer                  *vimcalc-insert-on-enter*

If set to 1, when entering the buffer, insert mode will automatically be
activated and the cursor will jump to the prompt. If 0 Vim will behave as
normally and will enter the buffer in normal mode. To evaluate expressions you
must manually enter insert mode. This option is to facilitate performing quick
calculations and then jumping back to the window you are working in.
>
    let g:VCalc_InsertOnEnter = 0
<
7.6 Enable <C-W> Commands in Insert Mode               *vimcalc-cw-insert-mode*

If set to 1 then you may issue select <C-W> based window commands whilst in
insert mode in the VimCalc buffer. If set to 0 <C-W> works as normal in insert
mode and deletes a word. This can irritatingly delete the prompt. The only
<C-W> commands defined for insert mode are movement based, i.e. h,j,k,l,b,t,w
and W. This option is to facilitate performing quick calculations and then
jumping back to the window you are working in.
>
    let g:VCalc_CWInsert = 0
<
7.7 Window Positioning                                *vimcalc-window-position*

This variable controls the opening position of VimCalc. Possible options are:
'top', 'bottom', 'left' and 'right'. If anything else is used the default is
to open on the bottom. 'top' and 'bottom' define horizontal splits and 'left'
and 'right' are vertical. If you choose 'left' or 'right' you may wish to up
the default window size.
>
    let g:VCalc_WindowPosition = 'top'
<

==============================================================================
8. Changelog                                                *vimcalc-changelog*

1.3         Added :int and :float directives.
            Added :status directive and improved directive highlighting.
            Added :vars directive.
            Added :q directive.
            Made 'let' optional during assignment.
            Everything is now unit tested with python code seperated.

1.2         Fixed a bug where global variables used for customisation were
            overwritten when VimCalc was sourced.

1.1         Added extra configuration options to allow for initial window
            positioning. As well as for entering the buffer in insert mode and
            leaving the buffer using <C-W> commands whilst in insert mode.

1.0         First release. I hope you enjoy VimCalc!

==============================================================================
9. Misc                                                          *vimcalc-misc*


9.1 Known bugs                                                   *vimcalc-bugs*

There are no known bugs. Hopefully there are not too many unknown. Please see
|vimcalc-contribute| to help.

The following are known limitations:

    * No complex numbers.
    * No arbitrary precision.
    * No lists of numbers (geometric/arithmetic progressions, statistics
      operations).
    * No stack based calculation.
    * No window positioning.

Hopefully, all of these features will be addressed in future releases of
VimCalc. If you wish to develop any of these or anything else for VimCalc
please see the next section.

9.2 Contribute                                             *vimcalc-contribute*

Contributing to VimCalc couldn't be easier. If you wish to do development work
on the code base or documentation simply fork the git repository and submit a
pull request to me. If you discover a bug or wish to submit a feature request
add an issue to the github page. Anything else, feel free to email me:
gregsexton@gmail.com.

9.3 Feedback                                                 *vimcalc-feedback*

Bugs, suggestions and patches are all very welcome. If you find issues with
VimCalc please add them to the issues page on the github project.

Check out the latest from github at https://github.com/gregsexton/VimCalc

 vim:tw=78:ts=8:ft=help:norl:
